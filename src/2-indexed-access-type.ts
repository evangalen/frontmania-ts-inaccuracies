type Person = { name: string; age: number; alive?: boolean };

type _ = never;
//   ^?

// âœ‚â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´â•´
// ğŸ º never type
(() => {
  type _ = never;
  //   ^?
})(); // ğŸ ¼
// ğŸ º with empty key (TS error)
(() => {
  type _ = Person[''];
  //   ^?
})(); // ğŸ ¼
// ğŸ º single key
(() => {
  type _ = Person['name'];
  //   ^?
})(); // ğŸ ¼
// ğŸ º union with two keys
(() => {
  type _ = Person['name' | 'age'];
  //   ^?
})(); // ğŸ ¼
// ğŸ º union with all keys including optional key
(() => {
  type _ = Person['name' | 'age' | 'alive'];
  //   ^?
})(); // ğŸ ¼
// ğŸ º keyof
(() => {
  type _ = Person[keyof Person];
  //   ^?
})(); // ğŸ ¼
